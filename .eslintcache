[{"C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\index.js":"1","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\firebase.js":"2","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\components\\App.js":"3","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\routes\\Loginform.js":"4","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\routes\\Recipe.js":"5","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\routes\\Mainpage.js":"6"},{"size":198,"mtime":1610717856474,"results":"7","hashOfConfig":"8"},{"size":700,"mtime":1610115436742,"results":"9","hashOfConfig":"8"},{"size":1924,"mtime":1610983351681,"results":"10","hashOfConfig":"8"},{"size":3328,"mtime":1610974074324,"results":"11","hashOfConfig":"8"},{"size":3123,"mtime":1610972615815,"results":"12","hashOfConfig":"8"},{"size":8286,"mtime":1610988906515,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"17v89qv",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"17"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\index.js",["32"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport firebase from \"./firebase\";\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n\n\n\n\n",["33","34"],"C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\firebase.js",[],"C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\components\\App.js",["35","36","37","38","39","40","41","42"],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Link, BrowserRouter , Redirect } from 'react-router-dom';\r\nimport { authService } from '../firebase';\r\nimport \"../routes/style.css\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport Loginform from '../routes/Loginform';\r\nimport Mainpage from '../routes/Mainpage';\r\nimport Recipe from '../routes/Recipe';\r\n\r\nconsole.log(\"run App\");\r\n\r\nfunction App() {\r\n  console.log(\"run App fuction\");\r\n  const [init, setInit] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userObj, setUserObj] = useState(null);\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      console.log(\"changed\");\r\n      if (user) {\r\n        console.log(\"user login\")\r\n        setIsLoggedIn(true);\r\n        setUserObj(user);\r\n      } else {\r\n        console.log(\"user logout\")\r\n        setIsLoggedIn(false);\r\n      }\r\n      setInit(true);\r\n       \r\n    });\r\n    \r\n  }, []);\r\n  \r\n  return(\r\n    <BrowserRouter>\r\n    {/* 만약 로그인이 되면 Mainpage로 Redirect 아닌경우 Loginform을 보여줌 */}\r\n    {/* {isLoggedIn ? (<Redirect from=\"/Loginform\" to = \"/Checipe\" /> ) : null } */}\r\n    {/* {isLoggedIn ? (<Redirect from=\"/Loginform\" to = \"/Checipe\" /> ) : null } */}\r\n\r\n    {/* etstset asdasd*/}\r\n    {/* etstset */}\r\n  {/* etstset */}\r\n\r\n\r\n    {/* {isLoggedIn ? (<tttttttttttttttt } */}\r\n\r\n    {/* {isLoggedIn ? (<Redirect from=\"/Loginform\" to = \"/Checipe\" /> ) : ndddddull } */}\r\n    {/* url path가 아래로 바뀔때 마다 component에 맞는 화면을 보여줌 */}\r\n     <Route path=\"/Checipe\" component = {Mainpage} exact />\r\n     <Route path=\"/Recipe\" component = {Recipe} />\r\n     <Route path=\"/Loginform\" component = {Loginform} />\r\n  </BrowserRouter>\r\n\r\n  );\r\n  }  \r\n\r\n\r\nexport default App;\r\n","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\routes\\Loginform.js",["43","44","45","46","47","48","49","50"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link, BrowserRoute, Redirect } from 'react-router-dom';\nimport { authService, firebaseInstance } from \"../firebase\";\nimport \"./Loginform.css\";\nimport App from '../components/App'\n\nconst Loginform = () => {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      console.log(\"changed\");\n      if (user) {\n        console.log(\"user login\")\n        setIsLoggedIn(true);\n        setUserObj(user);\n      } else {\n        console.log(\"user logout\")\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n    \n  }, []);\n    const [email, setEmail] =useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    const onChange = (event) =>{\n       const {target: {name, value}} = event;\n       if(name===\"email\"){\n           setEmail(value)\n       }else if(name===\"password\"){\n           setPassword(value);\n       }\n    } ;\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try {\n          let data;\n          if (newAccount) {\n            data = await authService.createUserWithEmailAndPassword(\n              email,\n              password\n            )\n          } else {\n            data = await authService.signInWithEmailAndPassword(email, password)\n          }\n          console.log(data)\n        } catch (error) {\n          setError(error.message)\n        }\n      };\n\n      const toggleAccount = () => setNewAccount((prev) => !prev);\n      const onSocialClick = async (event) =>{\n        const {\n          target: {name},\n        } = event;\n        let provider;\n        if(name === \"Google\"){\n          provider = new firebaseInstance.auth.GoogleAuthProvider();\n\n        }else if(name === \"Github\")\n        {\n          provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n        console.log(data);\n      };\n    return(\n      <div className=\"backwrap\">\n      <div className=\"mainform\">\n        <form onSubmit={onSubmit} className=\"container\">\n            <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} className=\"authInput\" onChange={onChange}/>\n            <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} className=\"authInput\" onChange={onChange}/>\n            <input\n              type=\"submit\"\n              className=\"authInput authSubmit\"\n              value={newAccount ? \"Create Account\" : \"Sign In\"}\n            />\n            {error}\n        </form>\n        <span onClick={toggleAccount} className=\"authSwitch\">\n            {newAccount ? \"Sign In\" : \"Create Account\"}\n          </span>\n        <div className=\"authBtns\">\n            <button onClick={onSocialClick} name=\"Google\">Continue with Google</button>\n            <button onClick={onSocialClick} name=\"Github\">Continue with Github</button>\n        </div>\n   </div>\n   <div>{isLoggedIn ? <Redirect from=\"/Loginform\" to = \"/Checipe\" />: null}</div>\n   </div>\n\n  \n    )\n  }\n\n\nexport default Loginform;","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\routes\\Recipe.js",["51","52","53","54","55","56","57","58","59"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link, BrowserRouter } from 'react-router-dom';\nimport checipe_logo from './image/chaecipielogo.png';\nimport image2 from './image/image2.jfif';\nimport \"./style.css\";\nimport { authService } from '../firebase';\n// react에서 slick을 사용하기 위한 import \nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Slider from \"react-slick\";\n\n  \nconst Recipe = () => {\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      console.log(\"changed\");\n      if (user) {\n        console.log(\"user login\")\n        setIsLoggedIn(true);\n        setUserObj(user);\n      } else {\n        console.log(\"user logout\")\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n    \n  }, []);\n\n  // 로그아웃을 위한 함수를 선언\n  const onLogOutClick = () => authService.signOut();\n\n    return(\n            <div className=\"wrap\">\n                  <div className=\"half_bg\">   \n                      <div className=\"header\">\n                          <div className=\"logo\">\n                              {/* js에서는 img를 이런식으로 import해서 불러온다. */}\n                              <img\n                                src={ checipe_logo }\n                                width='100px'\n                                height='100px'\n                                alt= 'logo image'/>\n                          </div>\n                              <div>\n                                  <ul className=\"nav\">\n                                    {/* 수정해야하는 부분 아래처럼 Link가 li를 덮어야한다. */}\n                                      <li><Link to=\"#\" />About</li>\n                                       <li><Link to=\"#\" />Recipe</li>\n                                       <li><Link to=\"#\" />Notice</li>\n                                       <li><Link to=\"#\" />Open</li>\n                                  </ul>\n                              </div>\n                         \n                              <div className=\"login\">\n                                {/* 로그인이 되어있는 상태라면 로그아웃 , 아니라면 로그인 버튼을 보여줌 */}\n                                {isLoggedIn ?  <Link to=\"/Checipe\">\n                                  {/* 위에 선언한 로그아웃함수를 클릭했을 때 실행 */}\n                                     <li onClick={onLogOutClick}>로그아웃</li>\n                                </Link> : <Link to=\"/Loginform\">\n                                     <li>로그인</li>\n                                </Link> }\n\n                               \n                              </div>\n                           \n                   </div>\n              </div>  \n                  \n                  \n                   \n                  </div>\n\n\n    );\n    \n}         \n\n\n export default Recipe;","C:\\Users\\TFX5470H\\Desktop\\checipe-back\\src\\routes\\Mainpage.js",["60","61","62","63","64","65","66","67","68","69"],"import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch, Link, BrowserRouter } from 'react-router-dom';\r\nimport checipe_logo from './image/chaecipielogo.png';\r\nimport image2 from './image/image2.jfif';\r\nimport \"./style.css\";\r\nimport { authService } from '../firebase';\r\n// react에서 slick을 사용하기 위한 import \r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\n\r\n  \r\nconst Mainpage = () => {\r\n\r\n  const [init, setInit] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userObj, setUserObj] = useState(null);\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      console.log(\"changed\");\r\n      if (user) {\r\n        console.log(\"user login\")\r\n        setIsLoggedIn(true);\r\n        setUserObj(user);\r\n      } else {\r\n        console.log(\"user logout\")\r\n        setIsLoggedIn(false);\r\n      }\r\n      setInit(true);\r\n      return(\r\n       \r\n        console.log(\"clean up\") \r\n       )\r\n    });\r\n    \r\n  }, []);\r\n\r\n  // 로그아웃을 위한 함수를 선언\r\n  const onLogOutClick = () => authService.signOut();\r\n\r\n    // 아래쪽에 있는 슬라이드 설정\r\n    var settings_bttom = {\r\n      // 좌우 화살표 줄 것인가\r\n      arrows: false,\r\n      // 마지막 슬라이드에서 처음 슬라이스로\r\n      infinite: true,\r\n      speed: 4000,\r\n      // 한 번에 스크롤 몇 개 보여줄 건가\r\n      slidesToShow: 4,\r\n      // 스크롤 할 때마다 몇 장씩 넘길 것인가\r\n      slidesToScroll: 1,\r\n      // 자동 넘김을 할 것인가. 한다면 스피드는?\r\n      autoplay: true,\r\n      autoplaySpeed: 4000,\r\n      // 화면에 올리면 슬라이더가 자동으로 넘어가지 않음\r\n      pauseOnHover: true,\r\n      // 레이지 로딩할 거야?\r\n      lazyLoad: true\r\n      };\r\n      \r\n      // 중앙에 있는 슬라이드 설정\r\n      var settings_mid = {\r\n        fade: true,\r\n          // 점의 유무설정\r\n        dots: true,\r\n        // 좌우 화살표 줄 것인가\r\n        arrows: false,\r\n        // 마지막 슬라이드에서 처음 슬라이스로\r\n        infinite: true,\r\n        speed: 3000,\r\n        // 한 번에 스크롤 몇 개 보여줄 건가\r\n        slidesToShow: 1,\r\n        // 스크롤 할 때마다 몇 장씩 넘길 것인가\r\n        slidesToScroll: 1,\r\n        // 자동 넘김을 할 것인가. 한다면 스피드는?\r\n        autoplay: true,\r\n        autoplaySpeed: 3000,\r\n        // 화면에 올리면 슬라이더가 자동으로 넘어가지 않음\r\n        pauseOnHover: false,\r\n        // 레이지 로딩할 거야?\r\n        lazyLoad: true\r\n        };\r\n\r\n    return(\r\n            <div className=\"wrap\">\r\n                  <div className=\"half_bg\">   \r\n                      <div className=\"header\">\r\n                          <div className=\"logo\">\r\n                              {/* js에서는 img를 이런식으로 import해서 불러온다. */}\r\n                              <img\r\n                                src={ checipe_logo }\r\n                                width='100px'\r\n                                height='100px'\r\n                                alt= 'logo image'/>\r\n                          </div>\r\n                              <div>\r\n                                  <ul className=\"nav\">\r\n                                    {/* 수정해야하는 부분 아래처럼 Link가 li를 덮어야한다. */}\r\n                                      <li><Link to=\"#\" />About</li>\r\n                                      <li><Link to=\"/Recipe\">Recipe</Link></li>\r\n                                       <li><Link to=\"#\" />Notice</li>\r\n                                       <li><Link to=\"#\" />Open</li>\r\n                                  </ul>\r\n                              </div>\r\n                         \r\n                              <div className=\"login\">\r\n                                {/* 로그인이 되어있는 상태라면 로그아웃 , 아니라면 로그인 버튼을 보여줌 */}\r\n                                {isLoggedIn ?  <Link to=\"/Checipe\">\r\n                                  {/* 위에 선언한 로그아웃함수를 클릭했을 때 실행 */}\r\n                                     <li onClick={onLogOutClick}>로그아웃</li>\r\n                                </Link> : <Link to=\"/Loginform\">\r\n                                     <li>로그인</li>\r\n                                </Link> }\r\n\r\n                               \r\n                              </div>\r\n                           \r\n                   </div>\r\n              </div>  \r\n                  \r\n                  <div className=\"midle\">\r\n                  <div className=\"slideshow-container\">\r\n                    {/* react slick은 이런식으로 사용이 가능하다 */}\r\n                  <Slider {...settings_mid}>\r\n                            <img\r\n                                src={ image2 }\r\n                                width='700px'\r\n                                height='370px'\r\n                                />\r\n                                 <img\r\n                                src={ image2 }\r\n                                width='700px'\r\n                                height='370px'\r\n                                />\r\n                                 <img\r\n                                src={ image2 }\r\n                                width='700px'\r\n                                height='370px'\r\n                                />\r\n                  </Slider>\r\n                  </div>\r\n  \r\n                              <div className=\"about_vegan\">\r\n                                  {/* 모든 link to 부분 수정해야함 */}\r\n                                 <li><Link to=\"#\" />About</li>\r\n                                  <li><Link to=\"#\" />VEGETARIAN</li>\r\n                                  <li><Link to=\"#\" />채식에관하여</li>\r\n                              </div>\r\n\r\n                          <div className=\"btn\">\r\n                              <li><Link to=\"#\" />레시피찾기</li>\r\n                      </div>\r\n      \r\n                  </div>\r\n\r\n                  <div className=\"lat\">\r\n                       <section className=\"visual\">\r\n                       <Slider {...settings_bttom}>\r\n                          <div id=\"link-image\">\r\n                             <img\r\n                                src={ image2 }\r\n                                width='200px'\r\n                                alt='호박고구마'\r\n                                border='3'\r\n                                />\r\n                              </div>\r\n                          <div id=\"link-image\">\r\n                          <img\r\n                                src={ image2 }\r\n                                width='200px'\r\n                                alt='호박고구마'\r\n                                border='3'\r\n                                />\r\n                          </div>\r\n                           <div id=\"link-image\">\r\n                           <img\r\n                                src={ image2 }\r\n                                width='200px'\r\n                                alt='호박고구마'\r\n                                border='3'\r\n                                />\r\n                          </div>\r\n                           <div id=\"link-image\">\r\n                           <img\r\n                                src={ image2 }\r\n                                width='200px'\r\n                                alt='호박고구마'\r\n                                border='3'\r\n                                />\r\n                          </div>\r\n                           <div id=\"link-image\">\r\n                           <img\r\n                                src={ image2 }\r\n                                width='200px'\r\n                                alt='호박고구마'\r\n                                border='3'\r\n                                />\r\n                          </div>\r\n                          </Slider>\r\n                      </section>\r\n                   \r\n                  </div>\r\n           </div>\r\n\r\n    );\r\n    \r\n\r\n \r\n    }\r\n\r\n export default Mainpage;",{"ruleId":"70","severity":1,"message":"71","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":16},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"70","severity":1,"message":"78","line":2,"column":27,"nodeType":"72","messageId":"73","endLine":2,"endColumn":33},{"ruleId":"70","severity":1,"message":"79","line":2,"column":42,"nodeType":"72","messageId":"73","endLine":2,"endColumn":48},{"ruleId":"70","severity":1,"message":"80","line":2,"column":50,"nodeType":"72","messageId":"73","endLine":2,"endColumn":54},{"ruleId":"70","severity":1,"message":"81","line":2,"column":72,"nodeType":"72","messageId":"73","endLine":2,"endColumn":80},{"ruleId":"70","severity":1,"message":"82","line":7,"column":8,"nodeType":"72","messageId":"73","endLine":7,"endColumn":14},{"ruleId":"70","severity":1,"message":"83","line":16,"column":10,"nodeType":"72","messageId":"73","endLine":16,"endColumn":14},{"ruleId":"70","severity":1,"message":"84","line":17,"column":10,"nodeType":"72","messageId":"73","endLine":17,"endColumn":20},{"ruleId":"70","severity":1,"message":"85","line":18,"column":10,"nodeType":"72","messageId":"73","endLine":18,"endColumn":17},{"ruleId":"70","severity":1,"message":"78","line":2,"column":27,"nodeType":"72","messageId":"73","endLine":2,"endColumn":33},{"ruleId":"70","severity":1,"message":"86","line":2,"column":35,"nodeType":"72","messageId":"73","endLine":2,"endColumn":40},{"ruleId":"70","severity":1,"message":"79","line":2,"column":42,"nodeType":"72","messageId":"73","endLine":2,"endColumn":48},{"ruleId":"70","severity":1,"message":"80","line":2,"column":50,"nodeType":"72","messageId":"73","endLine":2,"endColumn":54},{"ruleId":"70","severity":1,"message":"87","line":2,"column":56,"nodeType":"72","messageId":"73","endLine":2,"endColumn":68},{"ruleId":"70","severity":1,"message":"88","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":11},{"ruleId":"70","severity":1,"message":"83","line":8,"column":10,"nodeType":"72","messageId":"73","endLine":8,"endColumn":14},{"ruleId":"70","severity":1,"message":"85","line":10,"column":10,"nodeType":"72","messageId":"73","endLine":10,"endColumn":17},{"ruleId":"70","severity":1,"message":"78","line":2,"column":27,"nodeType":"72","messageId":"73","endLine":2,"endColumn":33},{"ruleId":"70","severity":1,"message":"86","line":2,"column":35,"nodeType":"72","messageId":"73","endLine":2,"endColumn":40},{"ruleId":"70","severity":1,"message":"79","line":2,"column":42,"nodeType":"72","messageId":"73","endLine":2,"endColumn":48},{"ruleId":"70","severity":1,"message":"89","line":2,"column":56,"nodeType":"72","messageId":"73","endLine":2,"endColumn":69},{"ruleId":"70","severity":1,"message":"90","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":14},{"ruleId":"70","severity":1,"message":"82","line":10,"column":8,"nodeType":"72","messageId":"73","endLine":10,"endColumn":14},{"ruleId":"70","severity":1,"message":"83","line":15,"column":10,"nodeType":"72","messageId":"73","endLine":15,"endColumn":14},{"ruleId":"70","severity":1,"message":"85","line":17,"column":10,"nodeType":"72","messageId":"73","endLine":17,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":43,"column":31,"nodeType":"93","endLine":47,"endColumn":52},{"ruleId":"70","severity":1,"message":"78","line":2,"column":27,"nodeType":"72","messageId":"73","endLine":2,"endColumn":33},{"ruleId":"70","severity":1,"message":"86","line":2,"column":35,"nodeType":"72","messageId":"73","endLine":2,"endColumn":40},{"ruleId":"70","severity":1,"message":"79","line":2,"column":42,"nodeType":"72","messageId":"73","endLine":2,"endColumn":48},{"ruleId":"70","severity":1,"message":"89","line":2,"column":56,"nodeType":"72","messageId":"73","endLine":2,"endColumn":69},{"ruleId":"70","severity":1,"message":"83","line":15,"column":10,"nodeType":"72","messageId":"73","endLine":15,"endColumn":14},{"ruleId":"70","severity":1,"message":"85","line":17,"column":10,"nodeType":"72","messageId":"73","endLine":17,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":90,"column":31,"nodeType":"93","endLine":94,"endColumn":52},{"ruleId":"94","severity":1,"message":"95","line":125,"column":29,"nodeType":"93","endLine":129,"endColumn":35},{"ruleId":"94","severity":1,"message":"95","line":130,"column":34,"nodeType":"93","endLine":134,"endColumn":35},{"ruleId":"94","severity":1,"message":"95","line":135,"column":34,"nodeType":"93","endLine":139,"endColumn":35},"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","no-native-reassign",["96"],"no-negated-in-lhs",["97"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'Slider' is defined but never used.","'init' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'userObj' is assigned a value but never used.","'Route' is defined but never used.","'BrowserRoute' is defined but never used.","'App' is defined but never used.","'BrowserRouter' is defined but never used.","'image2' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]